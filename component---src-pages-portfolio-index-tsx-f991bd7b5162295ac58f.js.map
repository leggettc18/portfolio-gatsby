{"version":3,"file":"component---src-pages-portfolio-index-tsx-f991bd7b5162295ac58f.js","mappings":"gLAEO,MCWMA,EAAmCC,IAO1C,IAP2C,MAC7CC,EAAK,YACLC,EAAW,QACXC,EAAO,MACPC,EAAK,SACLC,EAAQ,SACRC,GACHN,EACG,MACIC,MAAOM,EACPL,YAAaM,EAAkB,IAC/BC,EACAL,MAAOM,EAAY,gBACnBC,IDvBSC,EAAAA,EAAAA,gBAAe,cAchBC,KAAKC,aCYXC,EAAM,CACRd,MAAOA,EAAWA,EAAK,MAAMM,EAAiBA,EAC9CL,YAAaA,GAAeM,EAC5BJ,MAAO,GAAGK,GAAML,GAASM,GACzBD,IAAK,GAAGA,EAAMJ,EAASW,UAK3B,OAFAC,QAAQC,IAAIb,EAASW,UAGjBG,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,QAAMC,KAAK,kBAAkBC,QAAQ,gBACrCF,EAAAA,cAAA,aAAQJ,EAAId,OACZkB,EAAAA,cAAA,QAAMC,KAAK,cAAcC,QAASN,EAAIb,cACtCiB,EAAAA,cAAA,QAAMC,KAAK,QAAQC,QAASN,EAAIX,QAC/BW,EAAIN,KAAOU,EAAAA,cAAA,QAAMG,SAAS,SAASD,QAASN,EAAIN,OAC/CN,EAAiB,KAASgB,EAAAA,cAAA,QAAMG,SAAS,UAAUD,QAAQ,YAC5DN,EAAId,OAASkB,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAASN,EAAId,QACpDc,EAAIb,aACDiB,EAAAA,cAAA,QAAMG,SAAS,iBAAiBD,QAASN,EAAIb,cAEhDa,EAAIX,OAASe,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAASN,EAAIX,QACrDe,EAAAA,cAAA,QAAMC,KAAK,eAAeC,QAAQ,wBACjCV,GACGQ,EAAAA,cAAA,QAAMC,KAAK,kBAAkBC,QAASV,IAEzCI,EAAId,OAASkB,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAASN,EAAId,QACrDc,EAAIb,aACDiB,EAAAA,cAAA,QAAMC,KAAK,sBAAsBC,QAASN,EAAIb,cAEjDa,EAAIX,OAASe,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAASN,EAAIX,QACrDE,EACF,C,iGCzCX,MAyDaiB,EAAOvB,IAA6B,IAA5B,SAAEK,GAAqBL,EACxC,OAAOmB,EAAAA,cAACpB,EAAAA,EAAG,CAACE,MAAM,YAAYI,SAAUA,GAAY,EAGxD,UA7DsBmB,KAClB,MAAMC,GAAab,EAAAA,EAAAA,gBAAe,cAsBlC,OACIO,EAAAA,cAAA,OAAKO,UAAU,uBACXP,EAAAA,cAAA,OAAKO,UAAU,iIACXP,EAAAA,cAAA,MAAIO,UAAU,gBAAe,gBAC7BP,EAAAA,cAAA,OAAKO,UAAU,QACVD,EAAKE,OAAOC,MAAMC,KAAKC,GACpBX,EAAAA,cAAA,WACIY,IAAKD,EAAKE,GACVN,UAAU,iDAEVP,EAAAA,cAAA,MAAIO,UAAU,OACVP,EAAAA,cAACc,EAAAA,KAAI,CACDP,UAAU,yHACVQ,GAAE,cAAgBJ,EAAKK,OAAOC,MAE7BN,EAAKO,YAAYpC,QAG1BkB,EAAAA,cAAA,SAAG,WAASW,EAAKO,YAAYC,MAC7BnB,EAAAA,cAAA,SAAIW,EAAKS,SACTpB,EAAAA,cAACc,EAAAA,KAAI,CACDC,GAAE,cAAgBJ,EAAKK,OAAOC,KAC9BV,UAAU,0HACb,qBAOf,C","sources":["webpack://portfolio-gatsby/./src/hooks/useSiteMetadata.ts","webpack://portfolio-gatsby/./src/components/seo.tsx","webpack://portfolio-gatsby/./src/pages/portfolio/index.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    url\n                }\n            }\n        }\n    `)\n\n    return data.site.siteMetadata;\n}\n","import { PageProps } from \"gatsby\";\nimport * as React from \"react\";\nimport { FunctionComponent } from \"react\";\nimport { useSiteMetadata } from \"../hooks/useSiteMetadata\";\n\ntype SEOProps = {\n    title?: string;\n    description?: string;\n    article?: boolean;\n    image?: string;\n    location: PageProps[\"location\"];\n};\n\nexport const SEO: FunctionComponent<SEOProps> = ({\n    title,\n    description,\n    article,\n    image,\n    location,\n    children,\n}) => {\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        url,\n        image: defaultImage,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: title ? `${title} | ${defaultTitle}` : defaultTitle,\n        description: description || defaultDescription,\n        image: `${url}${image || defaultImage}`,\n        url: `${url}${location.pathname}`,\n    };\n\n    console.log(location.pathname);\n\n    return (\n        <>\n            <meta name=\"view-transition\" content=\"same-origin\" />\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {seo.url && <meta property=\"og:url\" content={seo.url} />}\n            {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n            {seo.title && <meta property=\"og:title\" content={seo.title} />}\n            {seo.description && (\n                <meta property=\"og:description\" content={seo.description} />\n            )}\n            {seo.image && <meta property=\"og:image\" content={seo.image} />}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            {twitterUsername && (\n                <meta name=\"twitter:creator\" content={twitterUsername} />\n            )}\n            {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n            {seo.description && (\n                <meta name=\"twitter:description\" content={seo.description} />\n            )}\n            {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n            {children}\n        </>\n    );\n};\n","import * as React from \"react\";\nimport { graphql, Link, PageProps, useStaticQuery } from \"gatsby\";\nimport { SEO } from \"../../components/seo\";\n\ntype Data = {\n    allMdx: {\n        nodes: Array<{\n            id: string;\n            fields: {\n                slug: string;\n            };\n            excerpt: string;\n            frontmatter: {\n                date: string;\n                title: string;\n            };\n        }>;\n    };\n};\n\nconst PortfolioPage = () => {\n    const data: Data = useStaticQuery(graphql`\nquery {\n    allMdx(\n        sort: { frontmatter: { portfolioScore: DESC } }\n        filter: { fields: { source: { eq: \"portfolio\" } } }\n        ) {\n        nodes {\n            frontmatter {\n                date(formatString: \"MMMM D, YYYY\")\n                title\n                portfolioScore\n            }\n            fields {\n                slug\n            }\n            id\n            excerpt\n        }\n    }\n}\n`);\n\n    return (\n        <div className=\"flex justify-center\">\n            <div className=\"prose lg:prose-xl prose-zinc dark:prose-invert md:max-w-[65ch] lg:max-w-[75ch] xl:max-w-[90ch] prose-h2:mt-2 lg:prose-h2:mt-2\">\n                <h1 className=\"px-9 md:px-4\">My Portfolio</h1>\n                <div className=\"px-9\">\n                    {data.allMdx.nodes.map((node) => (\n                        <article\n                            key={node.id}\n                            className=\"dark:bg-zinc-800 bg-zinc-200 p-4 rounded mb-4\"\n                        >\n                            <h2 className=\"m-0\">\n                                <Link\n                                    className=\"text-zinc-700 dark:text-zinc-300 hover:text-purple-600 dark:hover:text-purple-400 no-underline transition duration-200\"\n                                    to={`/portfolio/${node.fields.slug}`}\n                                >\n                                    {node.frontmatter.title}\n                                </Link>\n                            </h2>\n                            <p>Posted: {node.frontmatter.date}</p>\n                            <p>{node.excerpt}</p>\n                            <Link\n                                to={`/portfolio/${node.fields.slug}`}\n                                className=\"text-zinc-700 dark:text-zinc-300 hover:text-purple-600 dark:hover:text-purple-400 no-underline transition duration-200\"\n                            >\n                                Read More...\n                            </Link>\n                        </article>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport const Head = ({ location }: PageProps) => {\n    return <SEO title=\"Portfolio\" location={location} />;\n};\n\nexport default PortfolioPage;\n"],"names":["SEO","_ref","title","description","article","image","location","children","defaultTitle","defaultDescription","url","defaultImage","twitterUsername","useStaticQuery","site","siteMetadata","seo","pathname","console","log","React","name","content","property","Head","PortfolioPage","data","className","allMdx","nodes","map","node","key","id","Link","to","fields","slug","frontmatter","date","excerpt"],"sourceRoot":""}