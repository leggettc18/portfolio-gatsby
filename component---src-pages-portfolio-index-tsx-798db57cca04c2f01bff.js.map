{"version":3,"file":"component---src-pages-portfolio-index-tsx-798db57cca04c2f01bff.js","mappings":"gLAEO,MCUMA,EAAmCC,IAAiE,IAAhE,MAAEC,EAAK,YAAEC,EAAW,SAAEC,EAAQ,QAAEC,EAAO,MAAEC,EAAK,SAAEC,GAAUN,EAEvG,MACIC,MAAOM,EACPL,YAAaM,EAAkB,IAC/BC,EACAJ,MAAOK,EAAY,gBACnBC,IDhBSC,EAAAA,EAAAA,gBAAe,cAchBC,KAAKC,aCKXC,EAAM,CACRd,MAAOA,EAAWA,EAAK,MAAMM,EAAiBA,EAC9CL,YAAaA,GAAeM,EAC5BH,MAAM,GAAII,GAAMJ,GAASK,GACzBD,IAAI,GAAIA,EAAMN,GAGlB,OACIa,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,aAAQD,EAAId,OACZe,EAAAA,cAAA,QAAMC,KAAK,cAAcC,QAASH,EAAIb,cACtCc,EAAAA,cAAA,QAAMC,KAAK,QAAQC,QAASH,EAAIV,QAC/BU,EAAIN,KAAOO,EAAAA,cAAA,QAAMG,SAAS,SAASD,QAASH,EAAIN,OAC/CL,EAAiB,KAASY,EAAAA,cAAA,QAAMG,SAAS,UAAUD,QAAQ,YAC5DH,EAAId,OAASe,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAASH,EAAId,QACpDc,EAAIb,aACDc,EAAAA,cAAA,QAAMG,SAAS,iBAAiBD,QAASH,EAAIb,cAEhDa,EAAIV,OAASW,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAASH,EAAIV,QACrDW,EAAAA,cAAA,QAAMC,KAAK,eAAeC,QAAQ,wBACjCP,GACGK,EAAAA,cAAA,QAAMC,KAAK,kBAAkBC,QAASP,IAEzCI,EAAId,OAASe,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAASH,EAAId,QACrDc,EAAIb,aACDc,EAAAA,cAAA,QAAMC,KAAK,sBAAsBC,QAASH,EAAIb,cAEjDa,EAAIV,OAASW,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAASH,EAAIV,QACrDC,EACF,C,iGC/BX,MA6Cac,EAAOA,IACTJ,EAAAA,cAACjB,EAAAA,EAAG,CAACE,MAAM,cAGtB,UAjDsBoB,KAClB,MAAMC,GAAaV,EAAAA,EAAAA,gBAAe,cAmBlC,OACII,EAAAA,cAAA,OAAKO,UAAU,uBACXP,EAAAA,cAAA,OAAKO,UAAU,iIACXP,EAAAA,cAAA,MAAIO,UAAU,gBAAe,gBAC7BP,EAAAA,cAAA,OAAKO,UAAU,QAEPD,EAAKE,OAAOC,MAAMC,KAAKC,GACnBX,EAAAA,cAAA,WAASY,IAAKD,EAAKE,GAAIN,UAAU,iDAC7BP,EAAAA,cAAA,MAAIO,UAAU,OACVP,EAAAA,cAACc,EAAAA,KAAI,CAACP,UAAU,yHAAyHQ,GAAE,cAAgBJ,EAAKK,OAAOC,MAClKN,EAAKO,YAAYjC,QAG1Be,EAAAA,cAAA,SAAG,WAASW,EAAKO,YAAYC,MAC7BnB,EAAAA,cAAA,SAAIW,EAAKS,SACTpB,EAAAA,cAACc,EAAAA,KAAI,CAACC,GAAE,cAAgBJ,EAAKK,OAAOC,KAAQV,UAAU,0HAAyH,qBAMjM,C","sources":["webpack://portfolio-gatsby/./src/hooks/useSiteMetadata.ts","webpack://portfolio-gatsby/./src/components/seo.tsx","webpack://portfolio-gatsby/./src/pages/portfolio/index.tsx"],"sourcesContent":["import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    url\n                }\n            }\n        }\n    `)\n\n    return data.site.siteMetadata;\n}\n","import * as React from 'react';\nimport { FunctionComponent } from 'react';\nimport { useSiteMetadata } from '../hooks/useSiteMetadata';\n\ntype SEOProps = {\n    title?: string,\n    description?: string,\n    pathname?: string,\n    article?: boolean,\n    image?: string,\n}\n\nexport const SEO: FunctionComponent<SEOProps> = ({ title, description, pathname, article, image, children }) => {\n\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        url,\n        image: defaultImage,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: title ? `${title} | ${defaultTitle}` : defaultTitle,\n        description: description || defaultDescription,\n        image: `${url}${image || defaultImage}`,\n        url: `${url}${pathname}`\n    };\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {seo.url && <meta property=\"og:url\" content={seo.url} />}\n            {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n            {seo.title && <meta property=\"og:title\" content={seo.title} />}\n            {seo.description && (\n                <meta property=\"og:description\" content={seo.description} />\n            )}\n            {seo.image && <meta property=\"og:image\" content={seo.image} />}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            {twitterUsername && (\n                <meta name=\"twitter:creator\" content={twitterUsername} />\n            )}\n            {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n            {seo.description && (\n                <meta name=\"twitter:description\" content={seo.description} />\n            )}\n            {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n            {children}\n        </>\n    );\n};\n\n","import * as React from 'react'\nimport { graphql, Link, useStaticQuery } from 'gatsby'\nimport { SEO } from '../../components/seo'\n\ntype Data = {\n    allMdx: {\n        nodes: Array<{\n            id: string\n            fields: {\n                slug: string\n            }\n            excerpt: string\n            frontmatter: {\n                date: string,\n                title: string\n            }\n        }>\n    }\n}\n\nconst PortfolioPage = () => {\n    const data: Data = useStaticQuery(graphql`\n        query {\n            allMdx(sort: { frontmatter: { portfolioScore: DESC } }, filter: { fields: { source: { eq: \"portfolio\" }}}) {\n                nodes {\n                    frontmatter {\n                        date(formatString: \"MMMM D, YYYY\")\n                        title\n                        portfolioScore\n                    }\n                    fields {\n                        slug\n                    }\n                    id\n                    excerpt\n                }\n            }\n        }\n    `)\n\n    return (\n        <div className=\"flex justify-center\">\n            <div className=\"prose lg:prose-xl prose-zinc dark:prose-invert md:max-w-[65ch] lg:max-w-[75ch] xl:max-w-[90ch] prose-h2:mt-2 lg:prose-h2:mt-2\">\n                <h1 className=\"px-9 md:px-4\">My Portfolio</h1>\n                <div className=\"px-9\">\n                    {\n                        data.allMdx.nodes.map((node) => (\n                            <article key={node.id} className=\"dark:bg-zinc-800 bg-zinc-200 p-4 rounded mb-4\">\n                                <h2 className=\"m-0\">\n                                    <Link className=\"text-zinc-700 dark:text-zinc-300 hover:text-purple-600 dark:hover:text-purple-400 no-underline transition duration-200\" to={`/portfolio/${node.fields.slug}`}>\n                                        {node.frontmatter.title}\n                                    </Link>\n                                </h2>\n                                <p>Posted: {node.frontmatter.date}</p>\n                                <p>{node.excerpt}</p>\n                                <Link to={`/portfolio/${node.fields.slug}`} className=\"text-zinc-700 dark:text-zinc-300 hover:text-purple-600 dark:hover:text-purple-400 no-underline transition duration-200\">Read More...</Link>\n                            </article>\n                        ))\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport const Head = () => {\n    return <SEO title=\"Portfolio\" />\n}\n\nexport default PortfolioPage\n"],"names":["SEO","_ref","title","description","pathname","article","image","children","defaultTitle","defaultDescription","url","defaultImage","twitterUsername","useStaticQuery","site","siteMetadata","seo","React","name","content","property","Head","PortfolioPage","data","className","allMdx","nodes","map","node","key","id","Link","to","fields","slug","frontmatter","date","excerpt"],"sourceRoot":""}