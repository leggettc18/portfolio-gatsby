{"componentChunkName":"component---src-pages-blog-mdx-fields-slug-tsx-content-file-path-content-blog-golang-rest-api-embed-parameter-mdx","path":"/blog/","result":{"data":{"mdx":{"frontmatter":{"title":"Golang REST API Tip - Use an Embed Parameter to Embed Related Resources","date":"July 23, 2021"},"body":"\nIn a REST API, you often have relations between resources. While you can certainly\nreturn IDs for these related objects and require the API consumer to query them,\nthat can be somewhat inconvenient for your users. On the other hand, you certainly\ndon't want to eagerly load these on every request, or you could be sending\nunnecessarily large payloads in your responses. So what can you do?\n\nIn my case, I chose to support a query parameter with the name `embed`. Semantically,\nthe logic is that we are \"embedding\" the related resource in the response for\nthe resource requested by the path. For example, in a bookmark management app,\nyou may be requesting a folder and embed the bookmarks in the folder\nwith the following URL.\n\n```Bash\n<baseUrl>/folders/<id>/?embed=bookmarks\n```\n\nWith that, you would receive a response body similar to the following:\n\n```JSON\n{\n    \"id\": 1,\n    \"name\": \"folder\",\n    \"bookmarks\": [\n        {\n            \"id\": 1,\n            \"name\": \"My Website\",\n            \"url\": \"https://chrisleggett.me\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Devmarks Demo\",\n            \"url\": \"https://demo.devmarks.app\"\n        }\n    ]\n}\n```\n\nSide Note: I picked the word \"embed\" here, but there is no standard around this.\nIt would be just as valid for you to choose \"preload\" or \"include\". As long\nas your choice is documented with the rest of your api documentation, it\nultimately doesn't matter.\n\nNow how would you actually implement this? Below I will provide some code excerpts\nthat show how I chose to implement this. My examples below use `gorilla/mux` for\nrouting, and `gorm` for database access via an ORM, but with some light modification\nthis concept should be able to be implemented with other libraries as well.\nAdditionally, I do not claim that I am the first to come up with this, nor do\nI claim that this is the only way or even the best way to accomplish this.\n\nFirst off, I recommend extracting the embed query parameter from the URL and\nsaving it in the context via middleware so it can be pulled out of the context\nlater in any method down the line. As such, we need to setup a key for the\ncontext to use for storing and retrieving the embed values. I define this\nin a separate helpers package in order to avoid cyclical imports.\n\n```Go\n// helpers/ctx.go\npackage helpers\n\ntype contextKey struct {\n\tkey string\n}\nvar EmbedsKey = contextKey{\"embeds\"}\n\n// Wherever you choose to define this middleware\n...\nimport <project_url>/helpers\n...\nfunc apiMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tvalues := r.URL.Query()\n\t\tembeds := strings.Split(values.Get(\"embed\"), \",\")\n\t\tctx := r.Context()\n\t\tctx = context.WithValue(ctx, helpers.EmbedsKey, embeds)\n\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t\t\n\t})\n}\n```\n\nAs you can see, the helpers package defines a contextKey struct and defines an\nexported instance of that key called `EmbedsKey`. Wherever we define our middleware,\nwe then import the helpers package and use the `EmbedsKey` to save an array of\nstrings that we extracted from the `embeds` query parameter. We then move onto\nour next middleware/final handler passing in the `ResponseWriter` and the `Request`\nobject with our modifed context inside.\n\nMake sure you use the middleware in your router.\n\n```Go\nimport \t\"github.com/gorilla/mux\"\n\nr := mux.NewRouter()\nr.Use(apiMiddleware)\n// your routes and handlers here\n```\n\nNext, your request goes through your handler and eventually makes it to your \ndatabase code. Make sure your handler function extracts the context from the \n`Request` (`ctx := r.Context())` and then passes it down to your database handling package. \nThis is where I extract the embeds array we saved in the context\nearlier. GORM has a `Preload` function that we can use to preload associations\ndefined in your models. However, you need some way to validate the embed values\nto make sure they are valid associations in your database, as there's nothing\nstopping an api consumer from putting anything at all in the embeds value.\n\nTo start off with, let's wrap the logic around setting up the `*gorm.DB` instance\nwith the preloads.\n\n```Go\npackage db\n\ntype Database struct {\n\t*gorm.DB\n}\n\n// You should probably put this in your helpers package,\n// I have it here for clarity.\nfunc contains(array []string, s string) bool {\n\tfor _, x := range array {\n\t\tif x == s {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nfunc (db *Database) preloadEmbeds(valid []string, embeds []string) *gorm.DB {\n\tvar instance = db.DB\n\tfor _, embed := range embeds {\n\t\tif contains(valid, embed) {\n\t\t\tinstance = instance.Preload(strings.Title(embed))\n\t\t}\n\t}\n\treturn instance\n}\n```\n\nThis function takes an array of valid embed values and the ones that were\nprovided in the request. It then returns an instance of `*gorm.DB` with the\nPreloads prepared. It currently just ignores any invalid embed values that are\nprovided. If no embed values are provided, then it simply returns the same `*gorm.DB` \ninstance it was called on. As this returns a `*gorm.DB`, we can immediately chain a `First()` or\n`Find()` method, for instance, off of this function. For example:\n\n```Go\n// db/folder.go\nfunc (db *Database) GetFolderByID(ctx context.Context, id uint) (*model.Folder, error) {\n\tvar folder model.Folder\n\tembeds, ok := ctx.Value(helpers.EmbedsKey).([]string)\n\tif !ok {\n\t\treturn nil, errors.New(\"embeds parsing error\")\n\t}\n\treturn &folder, errors.Wrap(db.preloadEmbeds(model.FolderValidEmbeds(), embeds).\n        First(&folder, id).Error, \"unable to get folder\")\n}\n\n// model/folder.go\npackage model\n\ntype Folder struct {\n    ID    uint `json:\"id\"`\n\tName  string `json:\"name\"`\n\n\tBookmarks []Bookmark `gorm:\"many2many:bookmark_folder;\" json:\"bookmarks\"`\n}\n\n// Add strings to the array to allow embedding that resource through the\n// embed query paramter.\nfunc FolderValidEmbeds() []string {\n\treturn []string{\"bookmarks\"}\n}\n```\n\nUnfortunately Go does not have a good equivalent to static methods, so the next\nbest thing is to define a namespaced exported function in the models package\nthat returns an array of strings which represent the list of valid embed values.\nI named this one `FolderValidEmbeds`. If later on we develop a relationship\nbetween Bookmarks and Tags and we want to provide embed support for it, for example, \nyou would need to define a similar function called `BookmarkValidEmbeds` that returns \nan array of strings containing `\"tags\"`.\n\nAt this point, your API handler should write out the returned object as json\nto your api consumer. If you wish to see this in practice, check out my open source\nbookmark manager api. It is still in active development, but besides some minor\nreorganization this idea probably won't change. Check it out [here](https://github.com/leggettc18/devmarks/tree/main/api)!","excerpt":"In a REST API, you often have relations between resources. While you can certainly return IDs for these related objects and require the APIâ€¦"}},"pageContext":{"id":"e1002eea-3cbf-5be6-ba8a-7812babdb95b","fields__slug":"","__params":{},"frontmatter":{"author":"Christopher Leggett","title":"Golang REST API Tip - Use an Embed Parameter to Embed Related Resources","date":"2021-07-22T23:37:34-04:00","description":"A practical example demonstrating how to handle an embed parameter in a Golang REST API to embed or preload related resources.","tags":["go","rest","api","embed"]}}},"staticQueryHashes":["26522286","3159585216"],"slicesMap":{}}