"use strict";(self.webpackChunkportfolio_gatsby=self.webpackChunkportfolio_gatsby||[]).push([[260],{9391:function(n,a,s){var t=s(6736),e=s(959);function o(n){const a=Object.assign({p:"p",span:"span",a:"a"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"In a REST API, you often have relations between resources. While you can certainly\nreturn IDs for these related objects and require the API consumer to query them,\nthat can be somewhat inconvenient for your users. On the other hand, you certainly\ndon't want to eagerly load these on every request, or you could be sending\nunnecessarily large payloads in your responses. So what can you do?"),"\n",e.createElement(a.p,null,"In my case, I chose to support a query parameter with the name ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">embed</code>'}}),'. Semantically,\nthe logic is that we are "embedding" the related resource in the response for\nthe resource requested by the path. For example, in a bookmark management app,\nyou may be requesting a folder and embed the bookmarks in the folder\nwith the following URL.'),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token operator">&lt;</span>baseUrl<span class="token operator">></span>/folders/<span class="token operator">&lt;</span>id<span class="token operator">></span>/?embed<span class="token operator">=</span>bookmarks</code></pre></div>'}}),"\n",e.createElement(a.p,null,"With that, you would receive a response body similar to the following:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"folder"</span><span class="token punctuation">,</span>\n    <span class="token property">"bookmarks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"My Website"</span><span class="token punctuation">,</span>\n            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://chrisleggett.me"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Devmarks Demo"</span><span class="token punctuation">,</span>\n            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://demo.devmarks.app"</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,'Side Note: I picked the word "embed" here, but there is no standard around this.\nIt would be just as valid for you to choose "preload" or "include". As long\nas your choice is documented with the rest of your api documentation, it\nultimately doesn\'t matter.'),"\n",e.createElement(a.p,null,"Now how would you actually implement this? Below I will provide some code excerpts\nthat show how I chose to implement this. My examples below use ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gorilla/mux</code>'}})," for\nrouting, and ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gorm</code>'}})," for database access via an ORM, but with some light modification\nthis concept should be able to be implemented with other libraries as well.\nAdditionally, I do not claim that I am the first to come up with this, nor do\nI claim that this is the only way or even the best way to accomplish this."),"\n",e.createElement(a.p,null,"First off, I recommend extracting the embed query parameter from the URL and\nsaving it in the context via middleware so it can be pulled out of the context\nlater in any method down the line. As such, we need to setup a key for the\ncontext to use for storing and retrieving the embed values. I define this\nin a separate helpers package in order to avoid cyclical imports."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="go"><pre class="language-go"><code class="language-go"><span class="token comment">// helpers/ctx.go</span>\n<span class="token keyword">package</span> helpers\n\n<span class="token keyword">type</span> contextKey <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\tkey <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> EmbedsKey <span class="token operator">=</span> contextKey<span class="token punctuation">{</span><span class="token string">"embeds"</span><span class="token punctuation">}</span>\n\n<span class="token comment">// Wherever you choose to define this middleware</span>\n<span class="token operator">...</span>\n<span class="token keyword">import</span> <span class="token operator">&lt;</span>project_url<span class="token operator">></span><span class="token operator">/</span>helpers\n<span class="token operator">...</span>\n<span class="token keyword">func</span> <span class="token function">apiMiddleware</span><span class="token punctuation">(</span>next http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tvalues <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\tembeds <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"embed"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span>\n\t\tctx <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\tctx <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> helpers<span class="token punctuation">.</span>EmbedsKey<span class="token punctuation">,</span> embeds<span class="token punctuation">)</span>\n\t\tnext<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"As you can see, the helpers package defines a contextKey struct and defines an\nexported instance of that key called ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">EmbedsKey</code>'}}),". Wherever we define our middleware,\nwe then import the helpers package and use the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">EmbedsKey</code>'}})," to save an array of\nstrings that we extracted from the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">embeds</code>'}})," query parameter. We then move onto\nour next middleware/final handler passing in the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ResponseWriter</code>'}})," and the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Request</code>'}}),"\nobject with our modifed context inside."),"\n",e.createElement(a.p,null,"Make sure you use the middleware in your router."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="go"><pre class="language-go"><code class="language-go"><span class="token keyword">import</span> \t<span class="token string">"github.com/gorilla/mux"</span>\n\nr <span class="token operator">:=</span> mux<span class="token punctuation">.</span><span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nr<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>apiMiddleware<span class="token punctuation">)</span>\n<span class="token comment">// your routes and handlers here</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Next, your request goes through your handler and eventually makes it to your\ndatabase code. Make sure your handler function extracts the context from the\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Request</code>'}})," (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ctx := r.Context())</code>'}})," and then passes it down to your database handling package.\nThis is where I extract the embeds array we saved in the context\nearlier. GORM has a ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Preload</code>'}})," function that we can use to preload associations\ndefined in your models. However, you need some way to validate the embed values\nto make sure they are valid associations in your database, as there's nothing\nstopping an api consumer from putting anything at all in the embeds value."),"\n",e.createElement(a.p,null,"To start off with, let's wrap the logic around setting up the ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*gorm.DB</code>'}})," instance\nwith the preloads."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="go"><pre class="language-go"><code class="language-go"><span class="token keyword">package</span> db\n\n<span class="token keyword">type</span> Database <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n\t<span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB\n<span class="token punctuation">}</span>\n\n<span class="token comment">// You should probably put this in your helpers package,</span>\n<span class="token comment">// I have it here for clarity.</span>\n<span class="token keyword">func</span> <span class="token function">contains</span><span class="token punctuation">(</span>array <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> x <span class="token operator">:=</span> <span class="token keyword">range</span> array <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> x <span class="token operator">==</span> s <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">true</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">preloadEmbeds</span><span class="token punctuation">(</span>valid <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> embeds <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> instance <span class="token operator">=</span> db<span class="token punctuation">.</span>DB\n\t<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> embed <span class="token operator">:=</span> <span class="token keyword">range</span> embeds <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token function">contains</span><span class="token punctuation">(</span>valid<span class="token punctuation">,</span> embed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tinstance <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">Preload</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Title</span><span class="token punctuation">(</span>embed<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> instance\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"This function takes an array of valid embed values and the ones that were\nprovided in the request. It then returns an instance of ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*gorm.DB</code>'}})," with the\nPreloads prepared. It currently just ignores any invalid embed values that are\nprovided. If no embed values are provided, then it simply returns the same ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*gorm.DB</code>'}}),"\ninstance it was called on. As this returns a ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*gorm.DB</code>'}}),", we can immediately chain a ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">First()</code>'}})," or\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Find()</code>'}})," method, for instance, off of this function. For example:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="go"><pre class="language-go"><code class="language-go"><span class="token comment">// db/folder.go</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>Database<span class="token punctuation">)</span> <span class="token function">GetFolderByID</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> id <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>model<span class="token punctuation">.</span>Folder<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> folder model<span class="token punctuation">.</span>Folder\n\tembeds<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>helpers<span class="token punctuation">.</span>EmbedsKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"embeds parsing error"</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token operator">&amp;</span>folder<span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">Wrap</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span><span class="token function">preloadEmbeds</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span><span class="token function">FolderValidEmbeds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> embeds<span class="token punctuation">)</span><span class="token punctuation">.</span>\n        <span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>folder<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">,</span> <span class="token string">"unable to get folder"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// model/folder.go</span>\n<span class="token keyword">package</span> model\n\n<span class="token keyword">type</span> Folder <span class="token keyword">struct</span> <span class="token punctuation">{</span>\n    ID    <span class="token builtin">uint</span> <span class="token string">`json:"id"`</span>\n\tName  <span class="token builtin">string</span> <span class="token string">`json:"name"`</span>\n\n\tBookmarks <span class="token punctuation">[</span><span class="token punctuation">]</span>Bookmark <span class="token string">`gorm:"many2many:bookmark_folder;" json:"bookmarks"`</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Add strings to the array to allow embedding that resource through the</span>\n<span class="token comment">// embed query paramter.</span>\n<span class="token keyword">func</span> <span class="token function">FolderValidEmbeds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"bookmarks"</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Unfortunately Go does not have a good equivalent to static methods, so the next\nbest thing is to define a namespaced exported function in the models package\nthat returns an array of strings which represent the list of valid embed values.\nI named this one ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">FolderValidEmbeds</code>'}}),". If later on we develop a relationship\nbetween Bookmarks and Tags and we want to provide embed support for it, for example,\nyou would need to define a similar function called ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">BookmarkValidEmbeds</code>'}})," that returns\nan array of strings containing ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">"tags"</code>'}}),"."),"\n",e.createElement(a.p,null,"At this point, your API handler should write out the returned object as json\nto your api consumer. If you wish to see this in practice, check out my open source\nbookmark manager api. It is still in active development, but besides some minor\nreorganization this idea probably won't change. Check it out ",e.createElement(a.a,{href:"https://github.com/leggettc18/devmarks/tree/main/api"},"here"),"!"))}a.Z=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.ah)(),n.components);return a?e.createElement(a,n,e.createElement(o,n)):o(n)}},1087:function(n,a,s){s.d(a,{H:function(){return o}});var t=s(959),e=s(8394);const o=n=>{let{title:a,description:s,pathname:o,article:p,image:c,children:l}=n;const{title:r,description:u,url:i,image:k,twitterUsername:d}=(0,e.useStaticQuery)("2535782836").site.siteMetadata,m={title:a?a+" | "+r:r,description:s||u,image:""+i+(c||k),url:""+i+o};return t.createElement(t.Fragment,null,t.createElement("title",null,m.title),t.createElement("meta",{name:"description",content:m.description}),t.createElement("meta",{name:"image",content:m.image}),m.url&&t.createElement("meta",{property:"og:url",content:m.url}),!p?null:t.createElement("meta",{property:"og:type",content:"article"}),m.title&&t.createElement("meta",{property:"og:title",content:m.title}),m.description&&t.createElement("meta",{property:"og:description",content:m.description}),m.image&&t.createElement("meta",{property:"og:image",content:m.image}),t.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),d&&t.createElement("meta",{name:"twitter:creator",content:d}),m.title&&t.createElement("meta",{name:"twitter:title",content:m.title}),m.description&&t.createElement("meta",{name:"twitter:description",content:m.description}),m.image&&t.createElement("meta",{name:"twitter:image",content:m.image}),l)}},6736:function(n,a,s){s.d(a,{ah:function(){return o}});var t=s(959);const e=t.createContext({});function o(n){const a=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=ddea0695518bc4cb89832e63f0a4d48997c1ed19-4a9fb9105b589c6a8f98.js.map