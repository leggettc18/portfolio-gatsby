{"version":3,"file":"component---src-pages-blog-index-tsx-eb4158fcc8f67f818928.js","mappings":"gLAuDA,MA3CyCA,IAAiE,IAAhE,MAAEC,EAAK,YAAEC,EAAW,SAAEC,EAAQ,QAAEC,EAAO,MAAEC,EAAK,SAAEC,GAAUN,EAEhG,MACIC,MAAOM,EACPL,YAAaM,EAAkB,QAC/BC,EACAJ,MAAOK,EAAY,gBACnBC,IChBSC,EAAAA,EAAAA,gBAAe,cAchBC,KAAKC,aDKXC,EAAM,CACRd,MAAOA,GAASM,EAChBL,YAAaA,GAAeM,EAC5BH,MAAM,GAAII,GAAUJ,GAASK,GAC7BM,IAAI,GAAIP,EAAUN,GAGtB,OACIc,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,aAAQF,EAAId,OACZgB,EAAAA,cAAA,QAAMC,KAAK,cAAcC,QAASJ,EAAIb,cACtCe,EAAAA,cAAA,QAAMC,KAAK,QAAQC,QAASJ,EAAIV,QAC/BU,EAAIC,KAAOC,EAAAA,cAAA,QAAMG,SAAS,SAASD,QAASJ,EAAIC,OAC/CZ,EAAiB,KAASa,EAAAA,cAAA,QAAMG,SAAS,UAAUD,QAAQ,YAC5DJ,EAAId,OAASgB,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAASJ,EAAId,QACpDc,EAAIb,aACDe,EAAAA,cAAA,QAAMG,SAAS,iBAAiBD,QAASJ,EAAIb,cAEhDa,EAAIV,OAASY,EAAAA,cAAA,QAAMG,SAAS,WAAWD,QAASJ,EAAIV,QACrDY,EAAAA,cAAA,QAAMC,KAAK,eAAeC,QAAQ,wBACjCR,GACGM,EAAAA,cAAA,QAAMC,KAAK,kBAAkBC,QAASR,IAEzCI,EAAId,OAASgB,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAASJ,EAAId,QACrDc,EAAIb,aACDe,EAAAA,cAAA,QAAMC,KAAK,sBAAsBC,QAASJ,EAAIb,cAEjDa,EAAIV,OAASY,EAAAA,cAAA,QAAMC,KAAK,gBAAgBC,QAASJ,EAAIV,QACrDC,EACF,C,kGE/BX,MA4Cae,EAAOA,KACfC,EAAAA,CAAyB,EAG9B,UAhDiBC,KACb,MAAMC,GAAaZ,EAAAA,EAAAA,gBAAe,aAkBlC,OACIK,EAAAA,cAAA,OAAKQ,UAAU,uBACXR,EAAAA,cAAA,OAAKQ,UAAU,iIACXR,EAAAA,cAAA,MAAIQ,UAAU,gBAAe,iBAC7BR,EAAAA,cAAA,OAAKQ,UAAU,QAEPD,EAAKE,OAAOC,MAAMC,KAAKC,GACnBZ,EAAAA,cAAA,WAASa,IAAKD,EAAKE,GAAIN,UAAU,iDAC7BR,EAAAA,cAAA,MAAIQ,UAAU,OACVR,EAAAA,cAACe,EAAAA,KAAI,CAACP,UAAU,yHAAyHQ,GAAE,SAAWJ,EAAKK,OAAOC,MAC7JN,EAAKO,YAAYnC,QAG1BgB,EAAAA,cAAA,SAAG,WAASY,EAAKO,YAAYC,MAC7BpB,EAAAA,cAAA,SAAIY,EAAKS,SACTrB,EAAAA,cAACe,EAAAA,KAAI,CAACP,UAAU,2EAA2EQ,GAAE,SAAWJ,EAAKK,OAAOC,MAAQ,qBAM9I,C","sources":["webpack://portfolio-gatsby/./src/components/seo.tsx","webpack://portfolio-gatsby/./src/hooks/useSiteMetadata.ts","webpack://portfolio-gatsby/./src/pages/blog/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FunctionComponent } from 'react';\nimport { useSiteMetadata } from '../hooks/useSiteMetadata';\n\ntype SEOProps = {\n    title?: string,\n    description?: string,\n    pathname?: string,\n    article?: boolean,\n    image?: string,\n}\n\nconst SEO: FunctionComponent<SEOProps> = ({ title, description, pathname, article, image, children }) => {\n\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        siteUrl,\n        image: defaultImage,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${image || defaultImage}`,\n        url: `${siteUrl}${pathname}`\n    };\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {seo.url && <meta property=\"og:url\" content={seo.url} />}\n            {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n            {seo.title && <meta property=\"og:title\" content={seo.title} />}\n            {seo.description && (\n                <meta property=\"og:description\" content={seo.description} />\n            )}\n            {seo.image && <meta property=\"og:image\" content={seo.image} />}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            {twitterUsername && (\n                <meta name=\"twitter:creator\" content={twitterUsername} />\n            )}\n            {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n            {seo.description && (\n                <meta name=\"twitter:description\" content={seo.description} />\n            )}\n            {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n            {children}\n        </>\n    );\n};\n\nexport default SEO;\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    url\n                }\n            }\n        }\n    `)\n\n    return data.site.siteMetadata;\n}\n","import * as React from 'react'\nimport { useStaticQuery, graphql, Link } from 'gatsby'\nimport SEO from '../../components/seo'\n\ntype Data = {\n    allMdx: {\n        nodes: Array<{\n            id: string\n            excerpt: string\n            fields: {\n                slug: string\n            }\n            frontmatter: {\n                date: string,\n                title: string\n            }\n        }>\n    }\n}\n\nconst BlogPage = () => {\n    const data: Data = useStaticQuery(graphql`\n        query {\n            allMdx(sort: { frontmatter: { date: DESC } }, filter: { fields: { source: { eq: \"blog\" }}}) {\n                nodes {\n                    frontmatter {\n                        date(formatString: \"MMMM D, YYYY\")\n                        title\n                    }\n                    fields {\n                        slug\n                    }\n                    id\n                    excerpt\n                }\n            }\n        }\n    `)\n\n    return (\n        <div className=\"flex justify-center\">\n            <div className=\"prose lg:prose-xl prose-zinc dark:prose-invert md:max-w-[65ch] lg:max-w-[75ch] xl:max-w-[90ch] prose-h2:mt-2 lg:prose-h2:mt-2\">\n                <h1 className=\"px-9 md:px-4\">My Blog Posts</h1>\n                <div className=\"px-9\">\n                    {\n                        data.allMdx.nodes.map((node) => (\n                            <article key={node.id} className=\"dark:bg-zinc-800 bg-zinc-200 p-4 rounded mb-4\">\n                                <h2 className='m-0'>\n                                    <Link className=\"text-zinc-700 dark:text-zinc-300 hover:text-purple-600 dark:hover:text-purple-400 transition duration-200 no-underline\" to={`/blog/${node.fields.slug}`}>\n                                        {node.frontmatter.title}\n                                    </Link>\n                                </h2>\n                                <p>Posted: {node.frontmatter.date}</p>\n                                <p>{node.excerpt}</p>\n                                <Link className='dark:hover:text-purple-400 hover:text-purple-600 transition duration-200' to={`/blog/${node.fields.slug}`}>Read more...</Link>\n                            </article>\n                        ))\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport const Head = () => {\n    <SEO title=\"Blog Posts\" />\n}\n\nexport default BlogPage\n"],"names":["_ref","title","description","pathname","article","image","children","defaultTitle","defaultDescription","siteUrl","defaultImage","twitterUsername","useStaticQuery","site","siteMetadata","seo","url","React","name","content","property","Head","SEO","BlogPage","data","className","allMdx","nodes","map","node","key","id","Link","to","fields","slug","frontmatter","date","excerpt"],"sourceRoot":""}