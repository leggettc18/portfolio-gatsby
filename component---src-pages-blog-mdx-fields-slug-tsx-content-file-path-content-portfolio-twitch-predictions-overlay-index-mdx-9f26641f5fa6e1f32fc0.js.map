{"version":3,"file":"component---src-pages-blog-mdx-fields-slug-tsx-content-file-path-content-portfolio-twitch-predictions-overlay-index-mdx-9f26641f5fa6e1f32fc0.js","mappings":"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","sources":["webpack://portfolio-gatsby/./content/portfolio/twitch-predictions-overlay/index.mdx","webpack://portfolio-gatsby/./src/pages/blog/{mdx.fields__slug}.tsx","webpack://portfolio-gatsby/./src/hooks/useSiteMetadata.ts","webpack://portfolio-gatsby/./src/components/seo.tsx","webpack://portfolio-gatsby/./node_modules/.pnpm/@mdx-js+react@2.3.0_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Twitch Predictions Overlay is a custom overlay I wrote to use on\\n\", React.createElement(_components.a, {\n    href: \"twitch.tv\"\n  }, \"Twitch\"), \". The commonly used overlay available only\\nsupported predictions with 2 outcomes, so the goal was to make\\none that supported an arbitrary number of outcomes. You can use\\nit by going to \", React.createElement(_components.a, {\n    href: \"\"\n  }, \"https://twitch.leggett.dev\"), \" and linking your Twitch\\naccount! The homepage includes a demo to showcase approximately\\nwhat it will look like in your streaming software and if you're signed\\nin it will give you a link to copy.\"), \"\\n\", React.createElement(_components.p, null, \"Currently, the overlay supports predictions with an arbitrary number\\nof outcomes, but you may have some clarity issues after about 10.\\nIt also gives you a few options for the layout and direction.\\nFor example, if you want to put the prediction across\\nthe bottom of your stream, you will want to select Horizontal\\nfor the Layout and End for the Direction. If you want it along the\\nleft side of your stream layout, you want to choose Vertical and\\nStart. Under the hood, these go into the url parameters, so if you\\nwant different scenes to have different layouts, you can simply\\nset up multiple Browser Sources in your streaming software of choice\\nwith different URLs.\"), \"\\n\", React.createElement(_components.p, null, \"Under the hood, this is implemented in Next.js via the\\n\", React.createElement(_components.a, {\n    href: \"https://create.t3.gg\"\n  }, \"t3 stack\"), \". Ultimately it's a fairly simple\\napp. All it does is store authentication tokens obtained via OAuth.\\nThen, those tokens are used on the page for the actual overlay to set\\nup the WebSocket connection, subscribe to the Prediction related\\nmessages, parse the incoming messages, and display the results.\\nI chose the t3 stack because it scaffolded out the basic app stuff\\nand let me focus on the meat of the project, which was interfacing\\nwith Twitch's WebSocket API.\"), \"\\n\", React.createElement(_components.p, null, \"Currently, this is hosted on \", React.createElement(_components.a, {\n    href: \"https://vercel.com/\"\n  }, \"Vercel\"), \" and the\\ndatabase is hosted on \", React.createElement(_components.a, {\n    href: \"turso.tech\"\n  }, \"Turso\"), \", on the free tiers for\\nboth of them. It used to be hosted on PlanetScale, until they\\n\", React.createElement(_components.a, {\n    href: \"https://planetscale.com/docs/concepts/hobby-plan-deprecation-faq\"\n  }, \"deprecated their free tier\"), \".\\nIf you have found this project useful and want to get it off of the\\nfree tier, please consider donating to my \", React.createElement(_components.a, {\n    href: \"ko-fi.com/leggettc18\"\n  }, \"Ko-Fi\"), \"!\\nI would really appreciate it!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/chris/source/repos/portfolio-gatsby/content/portfolio/twitch-predictions-overlay/index.mdx\";\nimport * as React from \"react\";\nimport {SEO} from \"../../components/seo\";\nconst Post = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"prose lg:prose-xl prose-zinc dark:prose-invert md:max-w-[65ch] lg:max-w-[75ch] xl:max-w-[90ch] prose-h2:mt-2 lg:prose-h2:mt-2\"\n  }, React.createElement(\"h1\", {\n    className: \"px-9 pt-9 md:px-4\"\n  }, data.mdx.frontmatter.title), React.createElement(\"div\", {\n    className: \"px-9\"\n  }, React.createElement(\"p\", null, data.mdx.frontmatter.date), children)));\n};\nconst query = \"789134884\";\nexport const Head = _ref2 => {\n  var _data$mdx$frontmatter;\n  let {data, location} = _ref2;\n  return React.createElement(SEO, {\n    title: data.mdx.frontmatter.title,\n    description: data.mdx.excerpt || \"nothinâ€™\",\n    image: (_data$mdx$frontmatter = data.mdx.frontmatter.image) === null || _data$mdx$frontmatter === void 0 ? void 0 : _data$mdx$frontmatter.childImageSharp.sizes.src,\n    location: location,\n    article: true\n  });\n};\nPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    url\n                }\n            }\n        }\n    `)\n\n    return data.site.siteMetadata;\n}\n","import { PageProps } from \"gatsby\";\nimport * as React from \"react\";\nimport { FunctionComponent } from \"react\";\nimport { useSiteMetadata } from \"../hooks/useSiteMetadata\";\n\ntype SEOProps = {\n    title?: string;\n    description?: string;\n    article?: boolean;\n    image?: string;\n    location: PageProps[\"location\"];\n};\n\nexport const SEO: FunctionComponent<SEOProps> = ({\n    title,\n    description,\n    article,\n    image,\n    location,\n    children,\n}) => {\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        url,\n        image: defaultImage,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: title ? `${title} | ${defaultTitle}` : defaultTitle,\n        description: description || defaultDescription,\n        image: `${url}${image || defaultImage}`,\n        url: `${url}${location.pathname}`,\n    };\n\n    console.log(location.pathname);\n\n    return (\n        <>\n            <meta name=\"view-transition\" content=\"same-origin\" />\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {seo.url && <meta property=\"og:url\" content={seo.url} />}\n            {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n            {seo.title && <meta property=\"og:title\" content={seo.title} />}\n            {seo.description && (\n                <meta property=\"og:description\" content={seo.description} />\n            )}\n            {seo.image && <meta property=\"og:image\" content={seo.image} />}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            {twitterUsername && (\n                <meta name=\"twitter:creator\" content={twitterUsername} />\n            )}\n            {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n            {seo.description && (\n                <meta name=\"twitter:description\" content={seo.description} />\n            )}\n            {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n            {children}\n        </>\n    );\n};\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means itâ€™s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means itâ€™s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","_provideComponents","components","React","href","wrapper","MDXLayout","Post","_ref","data","children","className","mdx","frontmatter","title","date","Head","_ref2","_data$mdx$frontmatter","location","SEO","description","excerpt","image","childImageSharp","sizes","src","article","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","defaultTitle","defaultDescription","url","defaultImage","twitterUsername","useStaticQuery","site","siteMetadata","seo","pathname","console","log","name","content","property","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}