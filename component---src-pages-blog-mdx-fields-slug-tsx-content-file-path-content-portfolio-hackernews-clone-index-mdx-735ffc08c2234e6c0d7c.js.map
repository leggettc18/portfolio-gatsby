{"version":3,"file":"component---src-pages-blog-mdx-fields-slug-tsx-content-file-path-content-portfolio-hackernews-clone-index-mdx-735ffc08c2234e6c0d7c.js","mappings":"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","sources":["webpack://portfolio-gatsby/./content/portfolio/hackernews-clone/index.mdx","webpack://portfolio-gatsby/./src/pages/blog/{mdx.fields__slug}.tsx","webpack://portfolio-gatsby/./src/hooks/useSiteMetadata.ts","webpack://portfolio-gatsby/./src/components/seo.tsx","webpack://portfolio-gatsby/./node_modules/.pnpm/@mdx-js+react@2.3.0_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"This is a small educational project I wrote up to teach myself GraphQL and how to implement a\\nGraphQL API in Go. It's nothing \", React.createElement(_components.strong, null, \"too\"), \" fancy, but it might be useful to someone learning GraphQL\\nthemselves.\"), \"\\n\", React.createElement(_components.p, null, \"For the \", React.createElement(_components.a, {\n    href: \"https://github.com/leggettc18/hackernews-clone-api\"\n  }, \"backend\"), \", it utilizes the graph-gophers\\npackages for parsing the schema, mapping incoming requests to the correct resolvers, and handling\\nsubscriptions. It has a working setup for Websocket Subscriptions, Pagination, etc. Feel free to\\nlook it over, take what I wrote with a grain of salt, but you may learn something new!\"), \"\\n\", React.createElement(_components.p, null, \"For the \", React.createElement(_components.a, {\n    href: \"https://github.com/leggettc18/hackernews-vue-apollo\"\n  }, \"frontend\"), \", it utilizes the \", React.createElement(_components.a, {\n    href: \"https://apollo.vuejs.org/\"\n  }, \"Vue\\nversion of the Apollo\"), \" library. I followed a tutorial that may\\nor may not be slightly out of date, so some review and revision may be in order. Keep that in\\nmind if you choose to use it as an educational resource.\"), \"\\n\", React.createElement(_components.p, null, \"Feedback is appreciated if you come across these and find any glaring issues, or ways to improve\\nthem as educational resources. Feel free to leave an issue on whichever repo the code changes would\\ngo in.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/chris/source/repos/portfolio-gatsby/content/portfolio/hackernews-clone/index.mdx\";\nimport * as React from \"react\";\nimport {SEO} from \"../../components/seo\";\nconst Post = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(\"div\", {\n    className: \"flex justify-center\"\n  }, React.createElement(\"div\", {\n    className: \"prose lg:prose-xl prose-zinc dark:prose-invert md:max-w-[65ch] lg:max-w-[75ch] xl:max-w-[90ch] prose-h2:mt-2 lg:prose-h2:mt-2\"\n  }, React.createElement(\"h1\", {\n    className: \"px-9 pt-9 md:px-4\"\n  }, data.mdx.frontmatter.title), React.createElement(\"div\", {\n    className: \"px-9\"\n  }, React.createElement(\"p\", null, data.mdx.frontmatter.date), children)));\n};\nconst query = \"789134884\";\nexport const Head = _ref2 => {\n  var _data$mdx$frontmatter;\n  let {data, location} = _ref2;\n  return React.createElement(SEO, {\n    title: data.mdx.frontmatter.title,\n    description: data.mdx.excerpt || \"nothinâ€™\",\n    image: (_data$mdx$frontmatter = data.mdx.frontmatter.image) === null || _data$mdx$frontmatter === void 0 ? void 0 : _data$mdx$frontmatter.childImageSharp.sizes.src,\n    location: location,\n    article: true\n  });\n};\nPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Post, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    twitterUsername\n                    image\n                    url\n                }\n            }\n        }\n    `)\n\n    return data.site.siteMetadata;\n}\n","import { PageProps } from \"gatsby\";\nimport * as React from \"react\";\nimport { FunctionComponent } from \"react\";\nimport { useSiteMetadata } from \"../hooks/useSiteMetadata\";\n\ntype SEOProps = {\n    title?: string;\n    description?: string;\n    article?: boolean;\n    image?: string;\n    location: PageProps[\"location\"];\n};\n\nexport const SEO: FunctionComponent<SEOProps> = ({\n    title,\n    description,\n    article,\n    image,\n    location,\n    children,\n}) => {\n    const {\n        title: defaultTitle,\n        description: defaultDescription,\n        url,\n        image: defaultImage,\n        twitterUsername,\n    } = useSiteMetadata();\n\n    const seo = {\n        title: title ? `${title} | ${defaultTitle}` : defaultTitle,\n        description: description || defaultDescription,\n        image: `${url}${image || defaultImage}`,\n        url: `${url}${location.pathname}`,\n    };\n\n    console.log(location.pathname);\n\n    return (\n        <>\n            <meta name=\"view-transition\" content=\"same-origin\" />\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            {seo.url && <meta property=\"og:url\" content={seo.url} />}\n            {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n            {seo.title && <meta property=\"og:title\" content={seo.title} />}\n            {seo.description && (\n                <meta property=\"og:description\" content={seo.description} />\n            )}\n            {seo.image && <meta property=\"og:image\" content={seo.image} />}\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            {twitterUsername && (\n                <meta name=\"twitter:creator\" content={twitterUsername} />\n            )}\n            {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n            {seo.description && (\n                <meta name=\"twitter:description\" content={seo.description} />\n            )}\n            {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n            {children}\n        </>\n    );\n};\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means itâ€™s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means itâ€™s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","a","_provideComponents","components","React","href","wrapper","MDXLayout","Post","_ref","data","children","className","mdx","frontmatter","title","date","Head","_ref2","_data$mdx$frontmatter","location","SEO","description","excerpt","image","childImageSharp","sizes","src","article","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","defaultTitle","defaultDescription","url","defaultImage","twitterUsername","useStaticQuery","site","siteMetadata","seo","pathname","console","log","name","content","property","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}